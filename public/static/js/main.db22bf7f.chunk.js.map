{"version":3,"sources":["components/SideNav/SideNav.js","components/Input/Input.js","actions/addTodoAction.js","actions/editTodoAction.js","components/EditCreate/EditCreate.js","actions/todoCompletedAction.js","actions/deleteTodoAction.js","actions/importantTodoAction.js","components/Home/Home.js","components/View/View.js","App.js","serviceWorker.js","reducers/allTodos.js","redux.js","index.js"],"names":["SideNav","useState","open","setOpen","className","onClick","onBlur","exact","to","Input","state","onChange","event","props","change","ki","onFocus","setState","target","value","callBack","i","type","this","ref","label","elm","key","cb","Component","addTodoAction","x","payload","editTodoAction","EditCreate","editMode","title","loc","desc","expiresIn","alert","success","elms","getElements","push","getValue","validation","e","preventDefault","check","Date","getTime","onSubmit","index","todo","important","completed","id","Math","random","toString","dispatch","history","setTimeout","action","match","params","allTodos","find","td","newDate","date","getDate","length","dateFormate","getFullYear","getMonth","connect","store","todoCompletedAction","deleteTodoAction","importantTodoAction","Home","todos","importantTodoHandler","slice","path","location","pathname","importantTodos","filter","deleteTodo","splice","todoCompletationHandler","tasks","setData","importants","remainings","map","expiresInClass","checked","nxtProps","nxtState","View","expDate","exDate","toFixed","App","href","rel","component","Boolean","window","hostname","allTodo","JSON","parse","localStorage","getItem","setItem","stringify","allReducers","combineReducers","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db22bf7f.chunk.js","sourcesContent":["import React, { useState, Fragment } from 'react';\r\nimport './SideNav.css';\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst SideNav = () => {\r\n    const [open, setOpen] = useState(false);\r\n    return (\r\n        <Fragment>\r\n            <button className=\"menu\" onClick={() => { setOpen(!open) }} onBlur={() => { setOpen(false) }}>\r\n                <span className={open ? 'halfLine' : ''}></span>\r\n                <span></span>\r\n                <span className={open ? 'halfLine' : ''}></span>\r\n            </button>\r\n            <nav className={open ? 'openNav' : ''}>\r\n                <h3>Project To-Do</h3>\r\n                <NavLink exact to='/'><i className=\"material-icons\">settings</i> My Day</NavLink>\r\n                <NavLink to='/important'><i className=\"material-icons\">star</i> Important</NavLink>\r\n                <NavLink to='/tasks'><i className=\"material-icons\">work</i> Tasks</NavLink>\r\n            </nav>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default SideNav;","import React, { Component } from 'react';\r\nimport './Input.css';\r\n\r\nclass Input extends Component {\r\n    state = {\r\n        className: ''\r\n    }\r\n    onChange = (event) => {\r\n        this.props.change(event, this.props.ki)\r\n    }\r\n    render() {\r\n        let type = 'text';\r\n        let className = ''\r\n        if(this.props.type === 'date'){\r\n            type = this.props.type;\r\n            className = 'dateClass'\r\n        }\r\n        return (\r\n            <label className={ className + ' input-field ' + this.state.className} ref='input'>\r\n                {<p>{this.props.label}</p>}\r\n                <input type={type}\r\n                    value={this.props.value}\r\n                    onFocus={this.onFocus}\r\n                    onBlur={this.onBlur}\r\n                    onChange={this.onChange}\r\n                />\r\n            </label>\r\n        )\r\n    }\r\n    onFocus = () => {\r\n        this.setState({ className: 'inputFocus' })\r\n    }\r\n    onBlur = (event) => {\r\n        event.target.value !== '' ? this.setState({ className: 'inputBlur' }) : this.setState({ className: 'inputDanger' })\r\n    }\r\n    callBack = (className = 'inputDanger') => {\r\n        this.setState({ className: className })\r\n    }\r\n    componentDidMount() {\r\n        this.props.elm({ key: this.props.ki, cb: this.callBack })\r\n        this.props.value && this.onFocus();\r\n    }\r\n    i = 0\r\n    componentDidUpdate() {\r\n        if (this.i === 0 && this.props.value !== '') {\r\n            this.setState({ className: 'inputBlur' });\r\n            this.i++;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Input;","const addTodoAction = x => {\r\n    return {\r\n        type: 'addTodo',\r\n        payload: x\r\n    }\r\n}\r\n\r\nexport default addTodoAction","const editTodoAction = (x) => {\r\n    return {\r\n        type: 'editTodo',\r\n        payload: x\r\n    }\r\n}\r\n\r\nexport default editTodoAction;","import React, { Component } from 'react';\r\nimport './EditCreate.css'\r\nimport Input from '../Input/Input';\r\nimport { connect } from 'react-redux';\r\nimport addTodoAction from '../../actions/addTodoAction';\r\nimport editTodoAction from '../../actions/editTodoAction';\r\n\r\nclass EditCreate extends Component {\r\n    state = {\r\n        editMode: false,\r\n        title: '',\r\n        loc: '',\r\n        desc: '',\r\n        expiresIn: '',\r\n        alert: '',\r\n        success: false,\r\n    }\r\n    onSubmit() {\r\n        const todo = {\r\n            title: this.state.title,\r\n            loc: this.state.loc,\r\n            desc: this.state.desc,\r\n            expiresIn: this.state.expiresIn,\r\n            important: false,\r\n            completed: false,\r\n            id: Math.random().toString(),\r\n        }\r\n        if (this.state.editMode) {\r\n\r\n            this.props.dispatch(editTodoAction({ index: this.index, todo: todo }));\r\n            this.props.history.push('/');\r\n            return true;\r\n        }\r\n        this.props.dispatch(addTodoAction(todo));\r\n        this.setState({ title: '', loc: '', desc: '', expiresIn: '', alert: '', success: true });\r\n        for (let elm of this.elms) {\r\n            elm.cb('');\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ success: false });\r\n        }, 1500);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='EditCreate'>\r\n                <header>\r\n                    <h1>{this.state.editMode ? 'Edit Existing' : 'Add New'}</h1>\r\n                    <h3>Todo</h3>\r\n                </header>\r\n                {this.state.success && <p className='successMessage'>Your Todo has been Saved</p>}\r\n                <form action='/' onSubmit={this.validation} className='card'>\r\n                    <h1>{this.state.editMode ? 'Edit Existing' : 'Add New'} Todo</h1>\r\n                    <Input label='Title' change={this.getValue} ki=\"title\" value={this.state.title} elm={this.getElements} />\r\n                    <Input label='Location' change={this.getValue} ki=\"loc\" value={this.state.loc} elm={this.getElements} />\r\n                    <Input label='Description' change={this.getValue} ki=\"desc\" value={this.state.desc} elm={this.getElements} />\r\n                    <Input label='Expires In' change={this.getValue} type='date' ki=\"expiresIn\" value={this.state.expiresIn} elm={this.getElements} />\r\n                    {this.state.alert !== '' && <p className='alert'>{this.state.alert}</p>}\r\n                    <button className='btn'>{this.state.editMode ? 'Edit' : 'Create'} Todo</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n    elms = [];\r\n    getElements = (elm) => {\r\n        this.elms.push(elm);\r\n    }\r\n    getValue = (event, key) => {\r\n        if (key === 'expiresIn') {\r\n            this.setState({ expiresIn: event.target.value });\r\n            return true\r\n        }\r\n        this.setState({ [key]: event.target.value });\r\n    }\r\n    validation = (e) => {\r\n        e.preventDefault()\r\n        let check = true;\r\n        for (let elm of this.elms) {\r\n            if (this.state[elm.key] === '') {\r\n                elm.cb();\r\n                check = false;\r\n                this.setState({ alert: 'Please fill all the fields' })\r\n            }\r\n            if (elm.key === 'expiresIn' && this.state.expiresIn !== '') {\r\n                if (new Date(this.state.expiresIn).getTime() < new Date().getTime()) {\r\n                    elm.cb();\r\n                    check = false;\r\n                    this.setState({ alert: 'Please select a future date' });\r\n                }\r\n            }\r\n        }\r\n        check && this.onSubmit()\r\n    }\r\n    index = 0\r\n    componentDidMount() {\r\n        const id = this.props.match.params.id;\r\n        if (id) {\r\n            const todo = this.props.allTodos.find((td, index) => {\r\n                this.index = index;\r\n                return td.id === id\r\n            });\r\n            if (todo) {\r\n                this.setState({ title: todo.title, editMode: true, desc: todo.desc, loc: todo.loc, expiresIn: todo.expiresIn });\r\n            } else {\r\n                this.props.history.push('/');\r\n            }\r\n        } else {\r\n            const newDate = new Date();\r\n            let date = newDate.getDate().toString();\r\n            if (date.length < 2) {\r\n                date = 0 + date;\r\n            }\r\n            const dateFormate = newDate.getFullYear() + '-' + (newDate.getMonth() + 1) + '-' + date;\r\n            this.setState({ expiresIn: dateFormate })\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {\r\n        allTodos: store.allTodos\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(EditCreate);","const todoCompletedAction = x => {\r\n    return {\r\n        type: 'todoCompleted',\r\n        payload: x\r\n    }\r\n}\r\n\r\nexport default todoCompletedAction;","const deleteTodoAction = (x) => {\r\n    return {\r\n        type: 'deleteTodo',\r\n        payload: x\r\n    }\r\n}\r\n\r\nexport default deleteTodoAction;","const importantTodoAction = x => {\r\n    return{\r\n        type: 'todoImportant',\r\n        payload: x\r\n    }\r\n}\r\n\r\nexport default importantTodoAction;","import React, { Component } from 'react';\r\nimport './Home.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport todoCompletedAction from '../../actions/todoCompletedAction';\r\nimport deleteTodoAction from '../../actions/deleteTodoAction';\r\nimport importantTodoAction from '../../actions/importantTodoAction';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        todos: [],\r\n        title: ''\r\n    }\r\n    importantTodoHandler = (id) => {\r\n        this.props.dispatch(importantTodoAction(id));\r\n        const todos = this.state.todos.slice();\r\n        const path = this.props.location.pathname;\r\n        if (path === '/' || path === '/tasks') {\r\n            this.setState({ todos: todos });\r\n        }\r\n        else if (path === '/important') {\r\n            const importantTodos = todos.filter(todo => todo.important);\r\n            this.setState({ todos: importantTodos });\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='home'>\r\n                <Link to='/add' className=\"addBtn material-icons\">add</Link>\r\n                <header>\r\n                    <h1>{this.state.title}</h1>\r\n                    <h3>Today</h3>\r\n                </header>\r\n\r\n                {this.state.todos.map((todo, index) => {\r\n                    let checked = '';\r\n                    todo.completed ? checked = 'checked' : checked = 'check';\r\n                    const expiresIn = (new Date(todo.expiresIn).getTime() - new Date().getTime()) / 3600000;\r\n                    let expiresInClass;\r\n                    expiresIn <= 12 && !todo.completed ? expiresInClass = 'expiresIn' : expiresInClass = '';\r\n                    return (\r\n                        <div className={'todoBox ' + expiresInClass} key={index}>\r\n                            <i className='material-icons star' onClick={() => { this.importantTodoHandler(todo.id) }}>{todo.important ? 'star' : 'star_border'}</i>\r\n                            <div className='todoTitle' onClick={() => { this.todoCompletationHandler(todo.id) }}>\r\n                                <i className={'material-icons ' + checked}>check</i>\r\n                                {todo.title}\r\n                            </div>\r\n                            <div className='actions'>\r\n                                <Link to={'/view/' + todo.id} className=\"material-icons green\">remove_red_eye</Link>\r\n                                <Link to={'/edit/' + todo.id} className=\"material-icons marginLR grey\">edit</Link>\r\n                                <div className=\"material-icons red\" onClick={() => { this.deleteTodo(todo.id) }}>delete</div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        this.setData(this.props.location.pathname)\r\n    }\r\n    shouldComponentUpdate(nxtProps, nxtState) {\r\n        if (nxtProps !== this.props || nxtState !== this.state) {\r\n            if (nxtProps.location.pathname !== this.props.location.pathname) {\r\n                this.setData(nxtProps.location.pathname);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    deleteTodo = (id) => {\r\n        let i;\r\n        const todos = this.state.todos.slice();\r\n        this.props.allTodos.find((todo, index) => {\r\n            i = index;\r\n            return todo.id === id;\r\n        })\r\n        this.props.dispatch(deleteTodoAction(i));\r\n        todos.splice(i, 1);\r\n        this.setState({ todos: todos });\r\n    }\r\n    todoCompletationHandler = (id) => {\r\n        this.props.dispatch(todoCompletedAction(id));\r\n        const todos = this.state.todos.slice();\r\n        const path = this.props.location.pathname;\r\n        if (path === '/' || path === '/important') {\r\n            this.setState({ todos: todos });\r\n        }\r\n        else if (path === '/tasks') {\r\n            const tasks = todos.filter(todo => !todo.completed);\r\n            this.setState({ todos: tasks });\r\n        }\r\n    }\r\n    setData = (path) => {\r\n        const todos = this.props.allTodos;\r\n        if (path === '/') {\r\n            this.setState({ todos: todos, title: 'My Day' });\r\n        }\r\n        else if (path === '/important') {\r\n            const importants = todos.filter(todo => todo.important);\r\n            this.setState({ todos: importants, title: 'Important' })\r\n        }\r\n        else if (path === '/tasks') {\r\n            const remainings = todos.filter(todo => !todo.completed);\r\n            this.setState({ todos: remainings, title: 'Tasks' })\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {\r\n        allTodos: store.allTodos\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Home);","import React, { Component, Fragment } from 'react';\r\nimport './View.css';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass View extends Component {\r\n    state = {}\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Link to='/add' className=\"addBtn material-icons\">add</Link>\r\n                {this.state.todo &&\r\n                    <div className='view'>\r\n                        <header>\r\n                            <h1>{this.state.todo.title}</h1>\r\n                            <h3>Todo</h3>\r\n                        </header>\r\n                        <div className='card'>\r\n                            <h1>{this.state.todo.title} Todo</h1>\r\n                            <div className='basicInfo'>\r\n                                <table>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Status</th>\r\n                                            <th>Important</th>\r\n                                            <th>Expiry Date</th>\r\n                                            <th>Expires In</th>\r\n                                            <th>Location</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>{this.state.todo.completed ? 'Completed' : 'Incomplete'}</td>\r\n                                            <td>{this.state.todo.important ? 'Yes' : 'No'}</td>\r\n                                            <td>{this.state.expDate}</td>\r\n                                            <td className={this.state.className}>{this.state.expiresIn}</td>\r\n                                            <td>{this.state.todo.loc}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                            <h3>Description:</h3>\r\n                            {this.state.todo.desc}\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </Fragment>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        const todo = this.props.allTodos.find(todo => todo.id === this.props.match.params.id)\r\n        if (todo) {\r\n            const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n            const exDate = new Date(todo.expiresIn);\r\n\r\n            let date = exDate.getDate().toString();\r\n            if (date.length < 2) {\r\n                date = 0 + date\r\n            }\r\n            const expDate = months[exDate.getMonth()] + ' ' + date + ', ' + exDate.getFullYear();\r\n\r\n            let className = ''\r\n            let expiresIn = (exDate.getTime() - new Date().getTime()) / 3600000;\r\n            \r\n            if (expiresIn < 12 && expiresIn > 0 && !todo.completed) {\r\n                className = 'expiring'\r\n            }\r\n            else if (expiresIn < 0 && !todo.completed) {\r\n                className = 'expired'\r\n            }\r\n\r\n            if (expiresIn < 0) {\r\n                expiresIn = '0 hour';\r\n            }\r\n            else if (expiresIn > 0 && expiresIn < 1) {\r\n                expiresIn = 'Less than 1 hour'\r\n            }\r\n            else if (expiresIn < 2) {\r\n                expiresIn = expiresIn.toFixed() + ' hour';\r\n            }\r\n            else {\r\n                expiresIn = expiresIn.toFixed() + ' hours'\r\n            }\r\n            this.setState({ todo: todo, expDate: expDate, expiresIn: expiresIn, className: className });\r\n        } else {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {\r\n        allTodos: store.allTodos\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(View);","import React from 'react';\r\nimport SideNav from './components/SideNav/SideNav';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport EditCreate from './components/EditCreate/EditCreate';\r\nimport Home from './components/Home/Home';\r\nimport View from './components/View/View';\r\n\r\nconst App = () => (\r\n  <BrowserRouter>\r\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\"></link>\r\n    <SideNav />\r\n    <div className='TodoRoutes'>\r\n      <Switch className='TodoRoutes'>\r\n        <Route path='/edit/:id' component={EditCreate} />\r\n        <Route path='/add' component={EditCreate} />\r\n        <Route path='/view/:id' component={View} />\r\n        <Route path='/important' component={Home} />\r\n        <Route e path='/' component={Home} />\r\n      </Switch>\r\n    </div>\r\n  </BrowserRouter>\r\n)\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","let allTodo = JSON.parse(localStorage.getItem('allTodo'));\r\nif (allTodo == null) {\r\n    allTodo = []\r\n}\r\n\r\nconst allTodos = (state = allTodo, action) => {\r\n    if (action.type === 'addTodo') {\r\n        state.push(action.payload);\r\n        localStorage.setItem('allTodo', JSON.stringify(state));\r\n    }\r\n    else if (action.type === 'editTodo') {\r\n        state[action.payload.index] = action.payload.todo;\r\n        localStorage.setItem('allTodo', JSON.stringify(state));\r\n    }\r\n    else if (action.type === 'todoCompleted') {\r\n        const todo = state.find(td => td.id === action.payload);\r\n        todo.completed = !todo.completed;\r\n        localStorage.setItem('allTodo', JSON.stringify(state));\r\n    }\r\n    else if (action.type === 'todoImportant') {\r\n        const todo = state.find(td => td.id === action.payload);\r\n        todo.important = !todo.important;\r\n        localStorage.setItem('allTodo', JSON.stringify(state));\r\n    }\r\n    else if (action.type === 'deleteTodo') {\r\n        state.splice(action.payload, 1);\r\n        localStorage.setItem('allTodo', JSON.stringify(state));\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default allTodos;","import { createStore, combineReducers } from 'redux';\r\nimport allTodos from './reducers/allTodos';\r\n\r\nconst allReducers = combineReducers({\r\n    allTodos\r\n})\r\n\r\nconst store = createStore(allReducers);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux';\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}